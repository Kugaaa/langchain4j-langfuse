/*
 * langfuse
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kuga.langfuse.client.api;

import com.kuga.langfuse.client.invoker.ApiCallback;
import com.kuga.langfuse.client.invoker.ApiClient;
import com.kuga.langfuse.client.invoker.ApiException;
import com.kuga.langfuse.client.invoker.ApiResponse;
import com.kuga.langfuse.client.invoker.Configuration;
import com.kuga.langfuse.client.invoker.Pair;
import com.kuga.langfuse.client.invoker.ProgressRequestBody;
import com.kuga.langfuse.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kuga.langfuse.client.model.CreateScoreRequest;
import com.kuga.langfuse.client.model.CreateScoreResponse;
import java.time.OffsetDateTime;
import com.kuga.langfuse.client.model.Score;
import com.kuga.langfuse.client.model.ScoreDataType;
import com.kuga.langfuse.client.model.ScoreSource;
import com.kuga.langfuse.client.model.Scores;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScoreApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScoreApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for scoreCreate
     * @param createScoreRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scoreCreateCall(CreateScoreRequest createScoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createScoreRequest;

        // create path and map variables
        String localVarPath = "/api/public/scores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scoreCreateValidateBeforeCall(CreateScoreRequest createScoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createScoreRequest' is set
        if (createScoreRequest == null) {
            throw new ApiException("Missing the required parameter 'createScoreRequest' when calling scoreCreate(Async)");
        }

        return scoreCreateCall(createScoreRequest, _callback);

    }

    /**
     * 
     * Create a score
     * @param createScoreRequest  (required)
     * @return CreateScoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateScoreResponse scoreCreate(CreateScoreRequest createScoreRequest) throws ApiException {
        ApiResponse<CreateScoreResponse> localVarResp = scoreCreateWithHttpInfo(createScoreRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a score
     * @param createScoreRequest  (required)
     * @return ApiResponse&lt;CreateScoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateScoreResponse> scoreCreateWithHttpInfo(CreateScoreRequest createScoreRequest) throws ApiException {
        okhttp3.Call localVarCall = scoreCreateValidateBeforeCall(createScoreRequest, null);
        Type localVarReturnType = new TypeToken<CreateScoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a score
     * @param createScoreRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scoreCreateAsync(CreateScoreRequest createScoreRequest, final ApiCallback<CreateScoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = scoreCreateValidateBeforeCall(createScoreRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateScoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scoreDelete
     * @param scoreId The unique langfuse identifier of a score (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scoreDeleteCall(String scoreId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/public/scores/{scoreId}"
            .replace("{" + "scoreId" + "}", localVarApiClient.escapeString(scoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scoreDeleteValidateBeforeCall(String scoreId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scoreId' is set
        if (scoreId == null) {
            throw new ApiException("Missing the required parameter 'scoreId' when calling scoreDelete(Async)");
        }

        return scoreDeleteCall(scoreId, _callback);

    }

    /**
     * 
     * Delete a score
     * @param scoreId The unique langfuse identifier of a score (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public void scoreDelete(String scoreId) throws ApiException {
        scoreDeleteWithHttpInfo(scoreId);
    }

    /**
     * 
     * Delete a score
     * @param scoreId The unique langfuse identifier of a score (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scoreDeleteWithHttpInfo(String scoreId) throws ApiException {
        okhttp3.Call localVarCall = scoreDeleteValidateBeforeCall(scoreId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a score
     * @param scoreId The unique langfuse identifier of a score (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scoreDeleteAsync(String scoreId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scoreDeleteValidateBeforeCall(scoreId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scoreGet
     * @param page Page number, starts at 1. (optional)
     * @param limit Limit of items per page. If you encounter api issues due to too large page sizes, try to reduce the limit. (optional)
     * @param userId Retrieve only scores with this userId associated to the trace. (optional)
     * @param name Retrieve only scores with this name. (optional)
     * @param fromTimestamp Optional filter to only include scores created on or after a certain datetime (ISO 8601) (optional)
     * @param toTimestamp Optional filter to only include scores created before a certain datetime (ISO 8601) (optional)
     * @param source Retrieve only scores from a specific source. (optional)
     * @param operator Retrieve only scores with &lt;operator&gt; value. (optional)
     * @param value Retrieve only scores with &lt;operator&gt; value. (optional)
     * @param scoreIds Comma-separated list of score IDs to limit the results to. (optional)
     * @param configId Retrieve only scores with a specific configId. (optional)
     * @param dataType Retrieve only scores with a specific dataType. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scoreGetCall(Integer page, Integer limit, String userId, String name, OffsetDateTime fromTimestamp, OffsetDateTime toTimestamp, ScoreSource source, String operator, Double value, String scoreIds, String configId, ScoreDataType dataType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/public/scores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (fromTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromTimestamp", fromTimestamp));
        }

        if (toTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toTimestamp", toTimestamp));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (operator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operator", operator));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (scoreIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scoreIds", scoreIds));
        }

        if (configId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configId", configId));
        }

        if (dataType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataType", dataType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scoreGetValidateBeforeCall(Integer page, Integer limit, String userId, String name, OffsetDateTime fromTimestamp, OffsetDateTime toTimestamp, ScoreSource source, String operator, Double value, String scoreIds, String configId, ScoreDataType dataType, final ApiCallback _callback) throws ApiException {
        return scoreGetCall(page, limit, userId, name, fromTimestamp, toTimestamp, source, operator, value, scoreIds, configId, dataType, _callback);

    }

    /**
     * 
     * Get a list of scores
     * @param page Page number, starts at 1. (optional)
     * @param limit Limit of items per page. If you encounter api issues due to too large page sizes, try to reduce the limit. (optional)
     * @param userId Retrieve only scores with this userId associated to the trace. (optional)
     * @param name Retrieve only scores with this name. (optional)
     * @param fromTimestamp Optional filter to only include scores created on or after a certain datetime (ISO 8601) (optional)
     * @param toTimestamp Optional filter to only include scores created before a certain datetime (ISO 8601) (optional)
     * @param source Retrieve only scores from a specific source. (optional)
     * @param operator Retrieve only scores with &lt;operator&gt; value. (optional)
     * @param value Retrieve only scores with &lt;operator&gt; value. (optional)
     * @param scoreIds Comma-separated list of score IDs to limit the results to. (optional)
     * @param configId Retrieve only scores with a specific configId. (optional)
     * @param dataType Retrieve only scores with a specific dataType. (optional)
     * @return Scores
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Scores scoreGet(Integer page, Integer limit, String userId, String name, OffsetDateTime fromTimestamp, OffsetDateTime toTimestamp, ScoreSource source, String operator, Double value, String scoreIds, String configId, ScoreDataType dataType) throws ApiException {
        ApiResponse<Scores> localVarResp = scoreGetWithHttpInfo(page, limit, userId, name, fromTimestamp, toTimestamp, source, operator, value, scoreIds, configId, dataType);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of scores
     * @param page Page number, starts at 1. (optional)
     * @param limit Limit of items per page. If you encounter api issues due to too large page sizes, try to reduce the limit. (optional)
     * @param userId Retrieve only scores with this userId associated to the trace. (optional)
     * @param name Retrieve only scores with this name. (optional)
     * @param fromTimestamp Optional filter to only include scores created on or after a certain datetime (ISO 8601) (optional)
     * @param toTimestamp Optional filter to only include scores created before a certain datetime (ISO 8601) (optional)
     * @param source Retrieve only scores from a specific source. (optional)
     * @param operator Retrieve only scores with &lt;operator&gt; value. (optional)
     * @param value Retrieve only scores with &lt;operator&gt; value. (optional)
     * @param scoreIds Comma-separated list of score IDs to limit the results to. (optional)
     * @param configId Retrieve only scores with a specific configId. (optional)
     * @param dataType Retrieve only scores with a specific dataType. (optional)
     * @return ApiResponse&lt;Scores&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Scores> scoreGetWithHttpInfo(Integer page, Integer limit, String userId, String name, OffsetDateTime fromTimestamp, OffsetDateTime toTimestamp, ScoreSource source, String operator, Double value, String scoreIds, String configId, ScoreDataType dataType) throws ApiException {
        okhttp3.Call localVarCall = scoreGetValidateBeforeCall(page, limit, userId, name, fromTimestamp, toTimestamp, source, operator, value, scoreIds, configId, dataType, null);
        Type localVarReturnType = new TypeToken<Scores>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of scores
     * @param page Page number, starts at 1. (optional)
     * @param limit Limit of items per page. If you encounter api issues due to too large page sizes, try to reduce the limit. (optional)
     * @param userId Retrieve only scores with this userId associated to the trace. (optional)
     * @param name Retrieve only scores with this name. (optional)
     * @param fromTimestamp Optional filter to only include scores created on or after a certain datetime (ISO 8601) (optional)
     * @param toTimestamp Optional filter to only include scores created before a certain datetime (ISO 8601) (optional)
     * @param source Retrieve only scores from a specific source. (optional)
     * @param operator Retrieve only scores with &lt;operator&gt; value. (optional)
     * @param value Retrieve only scores with &lt;operator&gt; value. (optional)
     * @param scoreIds Comma-separated list of score IDs to limit the results to. (optional)
     * @param configId Retrieve only scores with a specific configId. (optional)
     * @param dataType Retrieve only scores with a specific dataType. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scoreGetAsync(Integer page, Integer limit, String userId, String name, OffsetDateTime fromTimestamp, OffsetDateTime toTimestamp, ScoreSource source, String operator, Double value, String scoreIds, String configId, ScoreDataType dataType, final ApiCallback<Scores> _callback) throws ApiException {

        okhttp3.Call localVarCall = scoreGetValidateBeforeCall(page, limit, userId, name, fromTimestamp, toTimestamp, source, operator, value, scoreIds, configId, dataType, _callback);
        Type localVarReturnType = new TypeToken<Scores>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scoreGetById
     * @param scoreId The unique langfuse identifier of a score (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scoreGetByIdCall(String scoreId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/public/scores/{scoreId}"
            .replace("{" + "scoreId" + "}", localVarApiClient.escapeString(scoreId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scoreGetByIdValidateBeforeCall(String scoreId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scoreId' is set
        if (scoreId == null) {
            throw new ApiException("Missing the required parameter 'scoreId' when calling scoreGetById(Async)");
        }

        return scoreGetByIdCall(scoreId, _callback);

    }

    /**
     * 
     * Get a score
     * @param scoreId The unique langfuse identifier of a score (required)
     * @return Score
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public Score scoreGetById(String scoreId) throws ApiException {
        ApiResponse<Score> localVarResp = scoreGetByIdWithHttpInfo(scoreId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a score
     * @param scoreId The unique langfuse identifier of a score (required)
     * @return ApiResponse&lt;Score&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Score> scoreGetByIdWithHttpInfo(String scoreId) throws ApiException {
        okhttp3.Call localVarCall = scoreGetByIdValidateBeforeCall(scoreId, null);
        Type localVarReturnType = new TypeToken<Score>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a score
     * @param scoreId The unique langfuse identifier of a score (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scoreGetByIdAsync(String scoreId, final ApiCallback<Score> _callback) throws ApiException {

        okhttp3.Call localVarCall = scoreGetByIdValidateBeforeCall(scoreId, _callback);
        Type localVarReturnType = new TypeToken<Score>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
