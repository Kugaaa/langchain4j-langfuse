/*
 * langfuse
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kuga.langfuse.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.kuga.langfuse.client.invoker.JSON;

/**
 * Daily usage of a given model. Usage corresponds to the unit set for the specific model (e.g. tokens).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-11T13:40:58.189755+08:00[Asia/Shanghai]", comments = "Generator version: 7.8.0")
public class UsageByModel {
  public static final String SERIALIZED_NAME_MODEL = "model";
  @SerializedName(SERIALIZED_NAME_MODEL)
  private String model;

  public static final String SERIALIZED_NAME_INPUT_USAGE = "inputUsage";
  @SerializedName(SERIALIZED_NAME_INPUT_USAGE)
  private Integer inputUsage;

  public static final String SERIALIZED_NAME_OUTPUT_USAGE = "outputUsage";
  @SerializedName(SERIALIZED_NAME_OUTPUT_USAGE)
  private Integer outputUsage;

  public static final String SERIALIZED_NAME_TOTAL_USAGE = "totalUsage";
  @SerializedName(SERIALIZED_NAME_TOTAL_USAGE)
  private Integer totalUsage;

  public static final String SERIALIZED_NAME_COUNT_TRACES = "countTraces";
  @SerializedName(SERIALIZED_NAME_COUNT_TRACES)
  private Integer countTraces;

  public static final String SERIALIZED_NAME_COUNT_OBSERVATIONS = "countObservations";
  @SerializedName(SERIALIZED_NAME_COUNT_OBSERVATIONS)
  private Integer countObservations;

  public static final String SERIALIZED_NAME_TOTAL_COST = "totalCost";
  @SerializedName(SERIALIZED_NAME_TOTAL_COST)
  private Double totalCost;

  public UsageByModel() {
  }

  public UsageByModel model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Get model
   * @return model
   */
  @javax.annotation.Nullable
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }


  public UsageByModel inputUsage(Integer inputUsage) {
    this.inputUsage = inputUsage;
    return this;
  }

  /**
   * Total number of generation input units (e.g. tokens)
   * @return inputUsage
   */
  @javax.annotation.Nonnull
  public Integer getInputUsage() {
    return inputUsage;
  }

  public void setInputUsage(Integer inputUsage) {
    this.inputUsage = inputUsage;
  }


  public UsageByModel outputUsage(Integer outputUsage) {
    this.outputUsage = outputUsage;
    return this;
  }

  /**
   * Total number of generation output units (e.g. tokens)
   * @return outputUsage
   */
  @javax.annotation.Nonnull
  public Integer getOutputUsage() {
    return outputUsage;
  }

  public void setOutputUsage(Integer outputUsage) {
    this.outputUsage = outputUsage;
  }


  public UsageByModel totalUsage(Integer totalUsage) {
    this.totalUsage = totalUsage;
    return this;
  }

  /**
   * Total number of generation total units (e.g. tokens)
   * @return totalUsage
   */
  @javax.annotation.Nonnull
  public Integer getTotalUsage() {
    return totalUsage;
  }

  public void setTotalUsage(Integer totalUsage) {
    this.totalUsage = totalUsage;
  }


  public UsageByModel countTraces(Integer countTraces) {
    this.countTraces = countTraces;
    return this;
  }

  /**
   * Get countTraces
   * @return countTraces
   */
  @javax.annotation.Nonnull
  public Integer getCountTraces() {
    return countTraces;
  }

  public void setCountTraces(Integer countTraces) {
    this.countTraces = countTraces;
  }


  public UsageByModel countObservations(Integer countObservations) {
    this.countObservations = countObservations;
    return this;
  }

  /**
   * Get countObservations
   * @return countObservations
   */
  @javax.annotation.Nonnull
  public Integer getCountObservations() {
    return countObservations;
  }

  public void setCountObservations(Integer countObservations) {
    this.countObservations = countObservations;
  }


  public UsageByModel totalCost(Double totalCost) {
    this.totalCost = totalCost;
    return this;
  }

  /**
   * Total model cost in USD
   * @return totalCost
   */
  @javax.annotation.Nonnull
  public Double getTotalCost() {
    return totalCost;
  }

  public void setTotalCost(Double totalCost) {
    this.totalCost = totalCost;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UsageByModel instance itself
   */
  public UsageByModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageByModel usageByModel = (UsageByModel) o;
    return Objects.equals(this.model, usageByModel.model) &&
        Objects.equals(this.inputUsage, usageByModel.inputUsage) &&
        Objects.equals(this.outputUsage, usageByModel.outputUsage) &&
        Objects.equals(this.totalUsage, usageByModel.totalUsage) &&
        Objects.equals(this.countTraces, usageByModel.countTraces) &&
        Objects.equals(this.countObservations, usageByModel.countObservations) &&
        Objects.equals(this.totalCost, usageByModel.totalCost)&&
        Objects.equals(this.additionalProperties, usageByModel.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(model, inputUsage, outputUsage, totalUsage, countTraces, countObservations, totalCost, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageByModel {\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    inputUsage: ").append(toIndentedString(inputUsage)).append("\n");
    sb.append("    outputUsage: ").append(toIndentedString(outputUsage)).append("\n");
    sb.append("    totalUsage: ").append(toIndentedString(totalUsage)).append("\n");
    sb.append("    countTraces: ").append(toIndentedString(countTraces)).append("\n");
    sb.append("    countObservations: ").append(toIndentedString(countObservations)).append("\n");
    sb.append("    totalCost: ").append(toIndentedString(totalCost)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("model");
    openapiFields.add("inputUsage");
    openapiFields.add("outputUsage");
    openapiFields.add("totalUsage");
    openapiFields.add("countTraces");
    openapiFields.add("countObservations");
    openapiFields.add("totalCost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inputUsage");
    openapiRequiredFields.add("outputUsage");
    openapiRequiredFields.add("totalUsage");
    openapiRequiredFields.add("countTraces");
    openapiRequiredFields.add("countObservations");
    openapiRequiredFields.add("totalCost");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsageByModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageByModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageByModel is not found in the empty JSON string", UsageByModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsageByModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("model") != null && !jsonObj.get("model").isJsonNull()) && !jsonObj.get("model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageByModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageByModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageByModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageByModel.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageByModel>() {
           @Override
           public void write(JsonWriter out, UsageByModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageByModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             UsageByModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsageByModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsageByModel
   * @throws IOException if the JSON string is invalid with respect to UsageByModel
   */
  public static UsageByModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageByModel.class);
  }

  /**
   * Convert an instance of UsageByModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

