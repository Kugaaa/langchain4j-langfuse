/*
 * langfuse
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kuga.langfuse.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kuga.langfuse.client.model.ScoreOneOf;
import com.kuga.langfuse.client.model.ScoreOneOf1;
import com.kuga.langfuse.client.model.ScoreOneOf2;
import com.kuga.langfuse.client.model.ScoreSource;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.kuga.langfuse.client.invoker.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-11T13:40:58.189755+08:00[Asia/Shanghai]", comments = "Generator version: 7.8.0")
public class Score extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(Score.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Score.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Score' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ScoreOneOf> adapterScoreOneOf = gson.getDelegateAdapter(this, TypeToken.get(ScoreOneOf.class));
            final TypeAdapter<ScoreOneOf1> adapterScoreOneOf1 = gson.getDelegateAdapter(this, TypeToken.get(ScoreOneOf1.class));
            final TypeAdapter<ScoreOneOf2> adapterScoreOneOf2 = gson.getDelegateAdapter(this, TypeToken.get(ScoreOneOf2.class));

            return (TypeAdapter<T>) new TypeAdapter<Score>() {
                @Override
                public void write(JsonWriter out, Score value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ScoreOneOf`
                    if (value.getActualInstance() instanceof ScoreOneOf) {
                        JsonElement element = adapterScoreOneOf.toJsonTree((ScoreOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ScoreOneOf1`
                    if (value.getActualInstance() instanceof ScoreOneOf1) {
                        JsonElement element = adapterScoreOneOf1.toJsonTree((ScoreOneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ScoreOneOf2`
                    if (value.getActualInstance() instanceof ScoreOneOf2) {
                        JsonElement element = adapterScoreOneOf2.toJsonTree((ScoreOneOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ScoreOneOf, ScoreOneOf1, ScoreOneOf2");
                }

                @Override
                public Score read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ScoreOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ScoreOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterScoreOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ScoreOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ScoreOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ScoreOneOf'", e);
                    }
                    // deserialize ScoreOneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ScoreOneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterScoreOneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ScoreOneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ScoreOneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ScoreOneOf1'", e);
                    }
                    // deserialize ScoreOneOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ScoreOneOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterScoreOneOf2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ScoreOneOf2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ScoreOneOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ScoreOneOf2'", e);
                    }

                    if (match == 1) {
                        Score ret = new Score();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for Score: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public Score() {
        super("oneOf", Boolean.FALSE);
    }

    public Score(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ScoreOneOf", ScoreOneOf.class);
        schemas.put("ScoreOneOf1", ScoreOneOf1.class);
        schemas.put("ScoreOneOf2", ScoreOneOf2.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return Score.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ScoreOneOf, ScoreOneOf1, ScoreOneOf2
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ScoreOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ScoreOneOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ScoreOneOf2) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ScoreOneOf, ScoreOneOf1, ScoreOneOf2");
    }

    /**
     * Get the actual instance, which can be the following:
     * ScoreOneOf, ScoreOneOf1, ScoreOneOf2
     *
     * @return The actual instance (ScoreOneOf, ScoreOneOf1, ScoreOneOf2)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ScoreOneOf`. If the actual instance is not `ScoreOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ScoreOneOf`
     * @throws ClassCastException if the instance is not `ScoreOneOf`
     */
    public ScoreOneOf getScoreOneOf() throws ClassCastException {
        return (ScoreOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ScoreOneOf1`. If the actual instance is not `ScoreOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ScoreOneOf1`
     * @throws ClassCastException if the instance is not `ScoreOneOf1`
     */
    public ScoreOneOf1 getScoreOneOf1() throws ClassCastException {
        return (ScoreOneOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ScoreOneOf2`. If the actual instance is not `ScoreOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ScoreOneOf2`
     * @throws ClassCastException if the instance is not `ScoreOneOf2`
     */
    public ScoreOneOf2 getScoreOneOf2() throws ClassCastException {
        return (ScoreOneOf2)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Score
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ScoreOneOf
        try {
            ScoreOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ScoreOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ScoreOneOf1
        try {
            ScoreOneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ScoreOneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ScoreOneOf2
        try {
            ScoreOneOf2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ScoreOneOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for Score with oneOf schemas: ScoreOneOf, ScoreOneOf1, ScoreOneOf2. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of Score given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Score
     * @throws IOException if the JSON string is invalid with respect to Score
     */
    public static Score fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Score.class);
    }

    /**
     * Convert an instance of Score to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

