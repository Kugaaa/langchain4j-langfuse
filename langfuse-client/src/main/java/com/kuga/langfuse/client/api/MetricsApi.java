/*
 * langfuse
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kuga.langfuse.client.api;

import com.kuga.langfuse.client.invoker.ApiCallback;
import com.kuga.langfuse.client.invoker.ApiClient;
import com.kuga.langfuse.client.invoker.ApiException;
import com.kuga.langfuse.client.invoker.ApiResponse;
import com.kuga.langfuse.client.invoker.Configuration;
import com.kuga.langfuse.client.invoker.Pair;
import com.kuga.langfuse.client.invoker.ProgressRequestBody;
import com.kuga.langfuse.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.kuga.langfuse.client.model.DailyMetrics;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetricsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetricsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetricsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for metricsDaily
     * @param page page number, starts at 1 (optional)
     * @param limit limit of items per page (optional)
     * @param traceName Optional filter by the name of the trace (optional)
     * @param userId Optional filter by the userId associated with the trace (optional)
     * @param tags Optional filter for metrics where traces include all of these tags (optional)
     * @param fromTimestamp Optional filter to only include traces on or after a certain datetime (ISO 8601) (optional)
     * @param toTimestamp Optional filter to only include traces before a certain datetime (ISO 8601) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricsDailyCall(Integer page, Integer limit, String traceName, String userId, List<String> tags, OffsetDateTime fromTimestamp, OffsetDateTime toTimestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/public/metrics/daily";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (traceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("traceName", traceName));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (fromTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromTimestamp", fromTimestamp));
        }

        if (toTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toTimestamp", toTimestamp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metricsDailyValidateBeforeCall(Integer page, Integer limit, String traceName, String userId, List<String> tags, OffsetDateTime fromTimestamp, OffsetDateTime toTimestamp, final ApiCallback _callback) throws ApiException {
        return metricsDailyCall(page, limit, traceName, userId, tags, fromTimestamp, toTimestamp, _callback);

    }

    /**
     * 
     * Get daily metrics of the Langfuse project
     * @param page page number, starts at 1 (optional)
     * @param limit limit of items per page (optional)
     * @param traceName Optional filter by the name of the trace (optional)
     * @param userId Optional filter by the userId associated with the trace (optional)
     * @param tags Optional filter for metrics where traces include all of these tags (optional)
     * @param fromTimestamp Optional filter to only include traces on or after a certain datetime (ISO 8601) (optional)
     * @param toTimestamp Optional filter to only include traces before a certain datetime (ISO 8601) (optional)
     * @return DailyMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public DailyMetrics metricsDaily(Integer page, Integer limit, String traceName, String userId, List<String> tags, OffsetDateTime fromTimestamp, OffsetDateTime toTimestamp) throws ApiException {
        ApiResponse<DailyMetrics> localVarResp = metricsDailyWithHttpInfo(page, limit, traceName, userId, tags, fromTimestamp, toTimestamp);
        return localVarResp.getData();
    }

    /**
     * 
     * Get daily metrics of the Langfuse project
     * @param page page number, starts at 1 (optional)
     * @param limit limit of items per page (optional)
     * @param traceName Optional filter by the name of the trace (optional)
     * @param userId Optional filter by the userId associated with the trace (optional)
     * @param tags Optional filter for metrics where traces include all of these tags (optional)
     * @param fromTimestamp Optional filter to only include traces on or after a certain datetime (ISO 8601) (optional)
     * @param toTimestamp Optional filter to only include traces before a certain datetime (ISO 8601) (optional)
     * @return ApiResponse&lt;DailyMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DailyMetrics> metricsDailyWithHttpInfo(Integer page, Integer limit, String traceName, String userId, List<String> tags, OffsetDateTime fromTimestamp, OffsetDateTime toTimestamp) throws ApiException {
        okhttp3.Call localVarCall = metricsDailyValidateBeforeCall(page, limit, traceName, userId, tags, fromTimestamp, toTimestamp, null);
        Type localVarReturnType = new TypeToken<DailyMetrics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get daily metrics of the Langfuse project
     * @param page page number, starts at 1 (optional)
     * @param limit limit of items per page (optional)
     * @param traceName Optional filter by the name of the trace (optional)
     * @param userId Optional filter by the userId associated with the trace (optional)
     * @param tags Optional filter for metrics where traces include all of these tags (optional)
     * @param fromTimestamp Optional filter to only include traces on or after a certain datetime (ISO 8601) (optional)
     * @param toTimestamp Optional filter to only include traces before a certain datetime (ISO 8601) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricsDailyAsync(Integer page, Integer limit, String traceName, String userId, List<String> tags, OffsetDateTime fromTimestamp, OffsetDateTime toTimestamp, final ApiCallback<DailyMetrics> _callback) throws ApiException {

        okhttp3.Call localVarCall = metricsDailyValidateBeforeCall(page, limit, traceName, userId, tags, fromTimestamp, toTimestamp, _callback);
        Type localVarReturnType = new TypeToken<DailyMetrics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
