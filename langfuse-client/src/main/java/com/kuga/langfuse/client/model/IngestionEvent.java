/*
 * langfuse
 * ## Authentication  Authenticate with the API using [Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication), get API keys in the project settings:  - username: Langfuse Public Key - password: Langfuse Secret Key  ## Exports  - OpenAPI spec: https://cloud.langfuse.com/generated/api/openapi.yml - Postman collection: https://cloud.langfuse.com/generated/postman/collection.json
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.kuga.langfuse.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kuga.langfuse.client.model.IngestionEventOneOf;
import com.kuga.langfuse.client.model.IngestionEventOneOf1;
import com.kuga.langfuse.client.model.IngestionEventOneOf2;
import com.kuga.langfuse.client.model.IngestionEventOneOf3;
import com.kuga.langfuse.client.model.IngestionEventOneOf4;
import com.kuga.langfuse.client.model.IngestionEventOneOf5;
import com.kuga.langfuse.client.model.IngestionEventOneOf6;
import com.kuga.langfuse.client.model.IngestionEventOneOf7;
import com.kuga.langfuse.client.model.IngestionEventOneOf8;
import com.kuga.langfuse.client.model.IngestionEventOneOf9;
import com.kuga.langfuse.client.model.ObservationBody;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.kuga.langfuse.client.invoker.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-11T13:40:58.189755+08:00[Asia/Shanghai]", comments = "Generator version: 7.8.0")
public class IngestionEvent extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(IngestionEvent.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!IngestionEvent.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'IngestionEvent' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<IngestionEventOneOf> adapterIngestionEventOneOf = gson.getDelegateAdapter(this, TypeToken.get(IngestionEventOneOf.class));
            final TypeAdapter<IngestionEventOneOf1> adapterIngestionEventOneOf1 = gson.getDelegateAdapter(this, TypeToken.get(IngestionEventOneOf1.class));
            final TypeAdapter<IngestionEventOneOf2> adapterIngestionEventOneOf2 = gson.getDelegateAdapter(this, TypeToken.get(IngestionEventOneOf2.class));
            final TypeAdapter<IngestionEventOneOf3> adapterIngestionEventOneOf3 = gson.getDelegateAdapter(this, TypeToken.get(IngestionEventOneOf3.class));
            final TypeAdapter<IngestionEventOneOf4> adapterIngestionEventOneOf4 = gson.getDelegateAdapter(this, TypeToken.get(IngestionEventOneOf4.class));
            final TypeAdapter<IngestionEventOneOf5> adapterIngestionEventOneOf5 = gson.getDelegateAdapter(this, TypeToken.get(IngestionEventOneOf5.class));
            final TypeAdapter<IngestionEventOneOf6> adapterIngestionEventOneOf6 = gson.getDelegateAdapter(this, TypeToken.get(IngestionEventOneOf6.class));
            final TypeAdapter<IngestionEventOneOf7> adapterIngestionEventOneOf7 = gson.getDelegateAdapter(this, TypeToken.get(IngestionEventOneOf7.class));
            final TypeAdapter<IngestionEventOneOf8> adapterIngestionEventOneOf8 = gson.getDelegateAdapter(this, TypeToken.get(IngestionEventOneOf8.class));
            final TypeAdapter<IngestionEventOneOf9> adapterIngestionEventOneOf9 = gson.getDelegateAdapter(this, TypeToken.get(IngestionEventOneOf9.class));

            return (TypeAdapter<T>) new TypeAdapter<IngestionEvent>() {
                @Override
                public void write(JsonWriter out, IngestionEvent value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `IngestionEventOneOf`
                    if (value.getActualInstance() instanceof IngestionEventOneOf) {
                        JsonElement element = adapterIngestionEventOneOf.toJsonTree((IngestionEventOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IngestionEventOneOf1`
                    if (value.getActualInstance() instanceof IngestionEventOneOf1) {
                        JsonElement element = adapterIngestionEventOneOf1.toJsonTree((IngestionEventOneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IngestionEventOneOf2`
                    if (value.getActualInstance() instanceof IngestionEventOneOf2) {
                        JsonElement element = adapterIngestionEventOneOf2.toJsonTree((IngestionEventOneOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IngestionEventOneOf3`
                    if (value.getActualInstance() instanceof IngestionEventOneOf3) {
                        JsonElement element = adapterIngestionEventOneOf3.toJsonTree((IngestionEventOneOf3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IngestionEventOneOf4`
                    if (value.getActualInstance() instanceof IngestionEventOneOf4) {
                        JsonElement element = adapterIngestionEventOneOf4.toJsonTree((IngestionEventOneOf4)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IngestionEventOneOf5`
                    if (value.getActualInstance() instanceof IngestionEventOneOf5) {
                        JsonElement element = adapterIngestionEventOneOf5.toJsonTree((IngestionEventOneOf5)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IngestionEventOneOf6`
                    if (value.getActualInstance() instanceof IngestionEventOneOf6) {
                        JsonElement element = adapterIngestionEventOneOf6.toJsonTree((IngestionEventOneOf6)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IngestionEventOneOf7`
                    if (value.getActualInstance() instanceof IngestionEventOneOf7) {
                        JsonElement element = adapterIngestionEventOneOf7.toJsonTree((IngestionEventOneOf7)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IngestionEventOneOf8`
                    if (value.getActualInstance() instanceof IngestionEventOneOf8) {
                        JsonElement element = adapterIngestionEventOneOf8.toJsonTree((IngestionEventOneOf8)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IngestionEventOneOf9`
                    if (value.getActualInstance() instanceof IngestionEventOneOf9) {
                        JsonElement element = adapterIngestionEventOneOf9.toJsonTree((IngestionEventOneOf9)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: IngestionEventOneOf, IngestionEventOneOf1, IngestionEventOneOf2, IngestionEventOneOf3, IngestionEventOneOf4, IngestionEventOneOf5, IngestionEventOneOf6, IngestionEventOneOf7, IngestionEventOneOf8, IngestionEventOneOf9");
                }

                @Override
                public IngestionEvent read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize IngestionEventOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IngestionEventOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterIngestionEventOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IngestionEventOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IngestionEventOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IngestionEventOneOf'", e);
                    }
                    // deserialize IngestionEventOneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IngestionEventOneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterIngestionEventOneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IngestionEventOneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IngestionEventOneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IngestionEventOneOf1'", e);
                    }
                    // deserialize IngestionEventOneOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IngestionEventOneOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterIngestionEventOneOf2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IngestionEventOneOf2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IngestionEventOneOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IngestionEventOneOf2'", e);
                    }
                    // deserialize IngestionEventOneOf3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IngestionEventOneOf3.validateJsonElement(jsonElement);
                        actualAdapter = adapterIngestionEventOneOf3;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IngestionEventOneOf3'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IngestionEventOneOf3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IngestionEventOneOf3'", e);
                    }
                    // deserialize IngestionEventOneOf4
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IngestionEventOneOf4.validateJsonElement(jsonElement);
                        actualAdapter = adapterIngestionEventOneOf4;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IngestionEventOneOf4'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IngestionEventOneOf4 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IngestionEventOneOf4'", e);
                    }
                    // deserialize IngestionEventOneOf5
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IngestionEventOneOf5.validateJsonElement(jsonElement);
                        actualAdapter = adapterIngestionEventOneOf5;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IngestionEventOneOf5'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IngestionEventOneOf5 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IngestionEventOneOf5'", e);
                    }
                    // deserialize IngestionEventOneOf6
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IngestionEventOneOf6.validateJsonElement(jsonElement);
                        actualAdapter = adapterIngestionEventOneOf6;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IngestionEventOneOf6'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IngestionEventOneOf6 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IngestionEventOneOf6'", e);
                    }
                    // deserialize IngestionEventOneOf7
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IngestionEventOneOf7.validateJsonElement(jsonElement);
                        actualAdapter = adapterIngestionEventOneOf7;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IngestionEventOneOf7'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IngestionEventOneOf7 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IngestionEventOneOf7'", e);
                    }
                    // deserialize IngestionEventOneOf8
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IngestionEventOneOf8.validateJsonElement(jsonElement);
                        actualAdapter = adapterIngestionEventOneOf8;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IngestionEventOneOf8'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IngestionEventOneOf8 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IngestionEventOneOf8'", e);
                    }
                    // deserialize IngestionEventOneOf9
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IngestionEventOneOf9.validateJsonElement(jsonElement);
                        actualAdapter = adapterIngestionEventOneOf9;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IngestionEventOneOf9'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IngestionEventOneOf9 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IngestionEventOneOf9'", e);
                    }

                    if (match == 1) {
                        IngestionEvent ret = new IngestionEvent();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for IngestionEvent: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public IngestionEvent() {
        super("oneOf", Boolean.FALSE);
    }

    public IngestionEvent(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("IngestionEventOneOf", IngestionEventOneOf.class);
        schemas.put("IngestionEventOneOf1", IngestionEventOneOf1.class);
        schemas.put("IngestionEventOneOf2", IngestionEventOneOf2.class);
        schemas.put("IngestionEventOneOf3", IngestionEventOneOf3.class);
        schemas.put("IngestionEventOneOf4", IngestionEventOneOf4.class);
        schemas.put("IngestionEventOneOf5", IngestionEventOneOf5.class);
        schemas.put("IngestionEventOneOf6", IngestionEventOneOf6.class);
        schemas.put("IngestionEventOneOf7", IngestionEventOneOf7.class);
        schemas.put("IngestionEventOneOf8", IngestionEventOneOf8.class);
        schemas.put("IngestionEventOneOf9", IngestionEventOneOf9.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return IngestionEvent.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * IngestionEventOneOf, IngestionEventOneOf1, IngestionEventOneOf2, IngestionEventOneOf3, IngestionEventOneOf4, IngestionEventOneOf5, IngestionEventOneOf6, IngestionEventOneOf7, IngestionEventOneOf8, IngestionEventOneOf9
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof IngestionEventOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IngestionEventOneOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IngestionEventOneOf2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IngestionEventOneOf3) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IngestionEventOneOf4) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IngestionEventOneOf5) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IngestionEventOneOf6) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IngestionEventOneOf7) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IngestionEventOneOf8) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IngestionEventOneOf9) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be IngestionEventOneOf, IngestionEventOneOf1, IngestionEventOneOf2, IngestionEventOneOf3, IngestionEventOneOf4, IngestionEventOneOf5, IngestionEventOneOf6, IngestionEventOneOf7, IngestionEventOneOf8, IngestionEventOneOf9");
    }

    /**
     * Get the actual instance, which can be the following:
     * IngestionEventOneOf, IngestionEventOneOf1, IngestionEventOneOf2, IngestionEventOneOf3, IngestionEventOneOf4, IngestionEventOneOf5, IngestionEventOneOf6, IngestionEventOneOf7, IngestionEventOneOf8, IngestionEventOneOf9
     *
     * @return The actual instance (IngestionEventOneOf, IngestionEventOneOf1, IngestionEventOneOf2, IngestionEventOneOf3, IngestionEventOneOf4, IngestionEventOneOf5, IngestionEventOneOf6, IngestionEventOneOf7, IngestionEventOneOf8, IngestionEventOneOf9)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `IngestionEventOneOf`. If the actual instance is not `IngestionEventOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IngestionEventOneOf`
     * @throws ClassCastException if the instance is not `IngestionEventOneOf`
     */
    public IngestionEventOneOf getIngestionEventOneOf() throws ClassCastException {
        return (IngestionEventOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IngestionEventOneOf1`. If the actual instance is not `IngestionEventOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IngestionEventOneOf1`
     * @throws ClassCastException if the instance is not `IngestionEventOneOf1`
     */
    public IngestionEventOneOf1 getIngestionEventOneOf1() throws ClassCastException {
        return (IngestionEventOneOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IngestionEventOneOf2`. If the actual instance is not `IngestionEventOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IngestionEventOneOf2`
     * @throws ClassCastException if the instance is not `IngestionEventOneOf2`
     */
    public IngestionEventOneOf2 getIngestionEventOneOf2() throws ClassCastException {
        return (IngestionEventOneOf2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IngestionEventOneOf3`. If the actual instance is not `IngestionEventOneOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IngestionEventOneOf3`
     * @throws ClassCastException if the instance is not `IngestionEventOneOf3`
     */
    public IngestionEventOneOf3 getIngestionEventOneOf3() throws ClassCastException {
        return (IngestionEventOneOf3)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IngestionEventOneOf4`. If the actual instance is not `IngestionEventOneOf4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IngestionEventOneOf4`
     * @throws ClassCastException if the instance is not `IngestionEventOneOf4`
     */
    public IngestionEventOneOf4 getIngestionEventOneOf4() throws ClassCastException {
        return (IngestionEventOneOf4)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IngestionEventOneOf5`. If the actual instance is not `IngestionEventOneOf5`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IngestionEventOneOf5`
     * @throws ClassCastException if the instance is not `IngestionEventOneOf5`
     */
    public IngestionEventOneOf5 getIngestionEventOneOf5() throws ClassCastException {
        return (IngestionEventOneOf5)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IngestionEventOneOf6`. If the actual instance is not `IngestionEventOneOf6`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IngestionEventOneOf6`
     * @throws ClassCastException if the instance is not `IngestionEventOneOf6`
     */
    public IngestionEventOneOf6 getIngestionEventOneOf6() throws ClassCastException {
        return (IngestionEventOneOf6)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IngestionEventOneOf7`. If the actual instance is not `IngestionEventOneOf7`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IngestionEventOneOf7`
     * @throws ClassCastException if the instance is not `IngestionEventOneOf7`
     */
    public IngestionEventOneOf7 getIngestionEventOneOf7() throws ClassCastException {
        return (IngestionEventOneOf7)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IngestionEventOneOf8`. If the actual instance is not `IngestionEventOneOf8`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IngestionEventOneOf8`
     * @throws ClassCastException if the instance is not `IngestionEventOneOf8`
     */
    public IngestionEventOneOf8 getIngestionEventOneOf8() throws ClassCastException {
        return (IngestionEventOneOf8)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IngestionEventOneOf9`. If the actual instance is not `IngestionEventOneOf9`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IngestionEventOneOf9`
     * @throws ClassCastException if the instance is not `IngestionEventOneOf9`
     */
    public IngestionEventOneOf9 getIngestionEventOneOf9() throws ClassCastException {
        return (IngestionEventOneOf9)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to IngestionEvent
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with IngestionEventOneOf
        try {
            IngestionEventOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IngestionEventOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IngestionEventOneOf1
        try {
            IngestionEventOneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IngestionEventOneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IngestionEventOneOf2
        try {
            IngestionEventOneOf2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IngestionEventOneOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IngestionEventOneOf3
        try {
            IngestionEventOneOf3.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IngestionEventOneOf3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IngestionEventOneOf4
        try {
            IngestionEventOneOf4.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IngestionEventOneOf4 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IngestionEventOneOf5
        try {
            IngestionEventOneOf5.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IngestionEventOneOf5 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IngestionEventOneOf6
        try {
            IngestionEventOneOf6.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IngestionEventOneOf6 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IngestionEventOneOf7
        try {
            IngestionEventOneOf7.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IngestionEventOneOf7 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IngestionEventOneOf8
        try {
            IngestionEventOneOf8.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IngestionEventOneOf8 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IngestionEventOneOf9
        try {
            IngestionEventOneOf9.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IngestionEventOneOf9 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for IngestionEvent with oneOf schemas: IngestionEventOneOf, IngestionEventOneOf1, IngestionEventOneOf2, IngestionEventOneOf3, IngestionEventOneOf4, IngestionEventOneOf5, IngestionEventOneOf6, IngestionEventOneOf7, IngestionEventOneOf8, IngestionEventOneOf9. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of IngestionEvent given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of IngestionEvent
     * @throws IOException if the JSON string is invalid with respect to IngestionEvent
     */
    public static IngestionEvent fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, IngestionEvent.class);
    }

    /**
     * Convert an instance of IngestionEvent to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

